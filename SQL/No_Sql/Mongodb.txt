MongoDB


MongoDB: MongoDB is a NoSQL() database.MongoDB is a JSON document datastore. 
It allows you to store and query JSON style documents with a few smarts on top.
Mongo DB is schema less structure
Sharding is a method for distributing data across multiple machines. MongoDB uses 
sharding to support deployments with very large data sets and high throughput operations.

Schema is not strict(dynamic schema)
Data store in mongo db as json object
Retrival process is fast(performance is good)
support Geospatial query
easily integration with big data hadoop
highly scalable

There are two methods for addressing system growth: vertical and horizontal scaling.

Vertical Scaling involves increasing the capacity of a single server, such as using a more powerful CPU, adding more RAM, 
or increasing the amount of storage space. Limitations in available technology may restrict a single machine from being 
sufficiently powerful for a given workload

Horizontal Scaling involves dividing the system dataset and load over multiple servers, adding additional servers to 
increase capacity as required. While the overall speed or capacity of a single machine may not be high,each machine 
handles a subset of the overall workload, potentially providing better efficiency than a single high-speed high-capacity server.

database
MongoDB groups of collections into databases. MongoDB can host several databases,
each grouping together collections.
Some reserved database names are as follows:
admin
local
config

collection
Collection is a group of MongoDB documents. It is the equivalent of an RDBMS table. A collection exists within a single database.
For example, both of the following documents could be stored in a single collection:
{"greeting" : "Hello world!", "views": 3}
{"signoff": "Good bye"}


Documents
A document is a set of key-value pairs. Documents have dynamic schema. Dynamic schema means that documents in the same collection 
do not need to have the same set of fields or structure, and common fields in a collection's documents may hold different types of data.
e.g {"greeting" : "Hello world!"}

write concern as “the level of acknowledgment requested from MongoDB for write operations to a standalone mongod or to replica sets or 
to sharded clusters. Simply put, a write concern is an indication of 'durability' passed along with write operations to MongoDB.

Tuple/Row--->Document
column------>Field
Table Join-->Embedded Documents
Primary Key->Primary Key (Default key _id provided by mongodb itself)



Advantages of MongoDB over RDBMS
1. Schema less − MongoDB is a document database in which one collection holds different documents. Number of fields, content and size of the document can differ from one document to another.
2. Structure of a single object is clear.
3. No complex joins.
4. Deep query-ability. MongoDB supports dynamic queries on documents using a document-based query language that's nearly as powerful as SQL.
Tuning.
5. Ease of scale-out − MongoDB is easy to scale.
Conversion/mapping of application objects to database objects not needed.
6. Uses internal memory for storing the (windowed) working set, enabling faster access of data.
7. MongoDB has inbuilt support for data partitioning (Sharding).

Why Use MongoDB?
Document Oriented Storage − Data is stored in the form of JSON style documents.
Index on any attribute
Replication and high availability
Auto-sharding
Rich queries
Fast in-place updates
Professional support by MongoDB

Where to Use MongoDB?
Big Data
Content Management and Delivery
Mobile and Social Infrastructure
User Data Management
Data Hub


To display database, you need to insert at least one document into it.

install pymongo library(if not installed)
import pymongo
connect to pymongo server(Connect to database server)
connect to database(connect to specific database)
connect to collection (connect to specific table within connected database)


Command
r--when we pass raw value to connection i.e username and password
f--when we pass variable which consist of credential to connection i.e username and password

Find the list of databases present in mongodb server
print(dbcon.list_database_names())

to check the id of inserted data
print(information.inserted_ids)

limiting the numbers of rows to load in RAM
result=information.find().limit(2)

to find specific number of row from collections
result[3] 

Sorting data
query={'last_name':'Pandey'}
result_det=information.find(query).sort('last_name',-1)

Retrive specific column
result=information.find({},{'last_name','first_name'})

find all the data from collection or table
result=information.find() 


Drop database existine working database.
db.dropDatabase()

Use specific database
use database_name

use collections 
databasename.collectionname.operation(which is want to perform on the given table or collection)

Remove all element or documents of given collection 
db.collectionname.remove({})

Update the details
Once a document is stored in the database, it can be changed using one of several
update methods: updateOne , updateMany , and replaceOne. updateOne and
updateMany.

update={'Age':21}
new_value={'$set':{'Age':29}}

x=collection.update_many(update,new_value)
print(x.modified_count)

x=collection.update_one(update,new_value)


Find index within the given collection
db.collectionname.getIndexes()

Create index within the collection
db.collection.creatIndex()

insert details in collection
db.collection.insert_one()

insert many record in collection
db.collection.insert_many()

finding version of mogodb
version() or
db.version()

#find the number of row or documents in collection 
collectionsdb.count_documents({})

Create index
Indexes look at an ordered list with references to the content. These in turn allow
MongoDB to query orders of magnitude faster. To create an index, use the
createIndex collection method.

db.users.find({"username": "user101"}).explain("executionStats")
--executionStats mode helps us understand the effect of using an index to
satisfy queries.

collectionsdb.create_index([("item",pymongo.ASCENDING)],unique=True)

Retrive the index name
list(collectionsdb.index_information())

Delete the document from collections
The CRUD API in MongoDB provides deleteOne and deleteMany for this purpose.
Both of these methods take a filter document as their first parameter. The filter
specifies a set of criteria to match against in removing documents.
For example:
> db.books.deleteOne({"_id" : 3})


db.collection.deleteOne()
db.collection.deleteMany()

Delete command
del_query={'email_id':'Nit'}
delete=information.delete_one(del_query)

Find the number of row deleted
print(delete.deleted_count)


del_query={'email_id':'Nit'}
delete=information.delete_many(del_query)

delete all row from table(No need to provide any argument)
information.delete_many({})

Drop collection
collection_drop=mydb['employeedetails']
collection_drop_final=collection_drop.drop()

update the details in documents 
db.collection.updateOne() 
db.collection.updateMany() 
db.collection.replaceOne() 



Ordered vs Unordered Operations
Bulk write operations can be either ordered or unordered.

With an ordered list of operations, MongoDB executes the operations serially. 
If an error occurs during the processing of one of the write operations, MongoDB will return without processing any remaining write operations in the list.

With an unordered list of operations, MongoDB can execute the operations in parallel, but this behavior is not guaranteed. 
If an error occurs during the processing of one of the write operations, MongoDB will continue to process remaining write operations in the list.

Retryable writes allow MongoDB drivers to automatically retry certain write operations a single time if they encounter network errors, 
or if they cannot find a healthy primary in the replica sets or sharded cluster. 

Retryable reads allow MongoDB drivers to automatically retry certain read operations a single time if they encounter certain network or server errors.



Tools for creating and manipulating SON, the Serialized Ocument Notation.
Regular dictionaries can be used instead of SON objects, 
but not when the order of keys is important. A SON object can be used just like a normal Python dictionary.
A subclass of dict that maintains ordering of keys and provides a few extra entities for dealing with SON. 
SON provides an API similar to collections.OrderedDict from Python 2.7+.



If the connection string does not specify a database/ you must specify a slash (/) 

Database as a service.
Mongo dbs atlas--cloud version of mongo db

The urllib module has been split into parts and renamed in Python 3 to urllib.request, urllib.parse, and urllib.error.
from urllib.parse import quote


Real time Application of the mongodb
ebay
Metlife
Adhar
Shutterfly


storing policy related documents details in mongodb

Interview

Question1: What are NoSQL databases? What are the different types of NoSQL databases? (Not only sql or non sql)
Question2: What kind of NoSQL database MongoDB is? 
Question3: Which are the most important features of MongoDB? 
Question4: What is a Namespace in MongoDB? Question5: Which all languages can be used with MongoDB?


Steps
1.Create organisation
2.Create project
3.Create cluster


Overview
Mongo Db consist of multiple databases 
each databases consist on multiple c0llections
each collection consist of multiple documents

The find method is used to perform queries in MongoDB. Querying returns a
subset of documents in a collection, from no documents at all to the entire
collection. Which documents get returned is determined by the first argument to
find , which is a document specifying the query criteria.
Example:
> db.users.find({"age" : 24})


The common data types in MongoDB are:
Null
{"x" : null}
Boolean
{"x" : true}
Number
{"x" : 4}
String
{"x" : "foobar"}
Date
{"x" : new Date()}
Regular expression
{"x" : /foobar/i}
Array
{"x" : ["a", "b", "c"]}
Embedded document
{"x" : {"foo" : "bar"}}
Object ID
{"x" : ObjectId()}
Binary Data
Binary data is a string of arbitrary bytes.
Code
{"x" : function() { /* ... */ }}

geospatial index
MongoDB has two types of geospatial indexes: 2dsphere and 2d. 2dsphere indexes
work with spherical geometries that model the surface of the earth based on the
WGS84 datum.

{
"name" : "New York City",
"loc" : {
"type" : "Point",
"coordinates" : [50, 2]
}
}


{
"name" : "Hudson River",
"loc" : {
"type" : "LineString",
"coordinates" : [[0,1], [0,2], [1,2]]
}
}
