OOPs is a powerful programming principle that uses objects (instances of classes)to organize code.
OOPS can be used to develop complex software applications. The key principles of OOP include 
encapsulation, inheritance,Abstraction and polymorphism. 



Encapsulation:

1.Encapsulation is one of the fundamental principles of object-oriented programming.
2.Encapsulation means binding or wrapping the method and the data together into a single unit known as class.
3.This helps to protect the data from unauthorized access and modification, and makes the code more modular and reusable.


In Python, encapsulation is achieved using access modifiers:
1.Public Access
2.Private Access
3.Protected Access

Encapsulation provides several benefits in Python programming:
Data Protection and Security:
Controlled Access and Modification: 
Improved Code Maintainability: 


class Student:
    def __init__(self, name, age):
        self.name = name  # Public attribute
        self._age = age   # Protected attribute
        self.__grade = None  # Private attribute

    def study(self, subject):
        print(f"{self.name} is studying {subject}")

    def __get_grade(self):
        return self.__grade

    def set_grade(self, grade):
        if 0 <= grade <= 100:
            self.__grade = grade
        else:
            print("Invalid grade value")

student = Student("Alice", 20)
student.study("Math")
student.set_grade(95)
print(student.name)  # Public attribute can be accessed
print(student._age)   # Protected attribute can be accessed (not recommended)
print(student.__grade)  # This will raise an AttributeError


private variable can be accessed using below syntax:

objectname,_className__variableName (student._Student__get_grade())



Inheritence

1.Inheritence allow one class to gain all the members(attributes and methods) of another class.
2.The class from which we are inheriting is called super-class/Parent and the class that is inherited is called a derived/child class
3.This enables code reusability and promotes the creation of hierarchical relationships between classes, 
where each class inherits from a parent class and can further extend its functionality.


1.Code Reusability
2.Hierarchical Organization
3.Specialization and Generalization
4.Extensible Designs


Types of Inheritence
1.Single Inheritence.
Single Inheritence is a type of inheritence where a class inherits properties and behaviours from a single parent class.This is the simplest and most common form of inheritence.
Syntax:

     class BaseClass:   --Parent class A
         class body --Base Class code

     class DerivedClass(BaseClass): --Child Class
         class body --Derived Class code

# Parent Class
class Employee:
  def __init__(self,name,id):
    self.name=name
    self.id=id
  
  def showDetails(self):
    print(f"The name of employee is {self.name} and id is {self.id}");
	
	
class Programmer(Employee):
  def showLanguage(self):
    print('Default language is Python');

p=Programmer('Sam',100)
p.showDetails()
p.showLanguage()

-----------------------
class BaseClass:
  def __init__(self,age):
    self.age=age
  
  def display(self):
    print('Age is',self.age)
  
class DerivedClass(BaseClass):
  def __init__(self,age,name):
    super().__init__(age)
    self.name=name
  
  def display(self):
    super().display()
    print(f"name is {self.name}")

e1=DerivedClass(16,"Nitesh")
e1.display()
o/p-
Age is 16
name is Nitesh
------------------------

2.Mulitple Inheritence.
It allows a class to inherit attributes and methods from multiple parents class or more then one base class.
Syntax:

     class A:      --Parent class A
         class body     
     class B:      --Parent class B
         class body
     class C(A,B): --Child Class C(inherit property from parents class A and B )
         class body --Derived Class code

class P1:
    def m1(self):
        print('Parent Method P1')
class P2:
    def m2(self):
        print('Parent Method P2')
class C(P1,P2):
    def m3(self):
        print('Child method of C1')
        
c=C()
print('*'*10,'Multiple Inheritence Example','*'*10)
c.m3()
c.m2()
c.m1()

3.Multilevel Inheritence.
Multilevel inheritance is a type of inheritance where a class inherits from a parent class, 
which itself inherits from another parent class, and so on. 
This creates a hierarchy of classes where each class inherits the properties and methods of its parent class. 

     class BaseClass:        
         Class Body  --Base class code   
     class DerivedClass1(BaseClass):      
         Class Body  --Derived Class 1 code 
     class DerivedClass2(DerivedClass1): 
         Class Body  --Derived class 2 code

class A:
  def m1(self):
    print('Class A Method')

class B(A):
  def m2(self):
    print('Class B method')

class C(B):
  def m3(self):
    print('Class C method')

c=C()
print('*'*10,'Multilevel Inheritence Example','*'*10)
c.m3()
c.m1()



4.Hybrid Inheritence.
It is a types of inheritence in which multiple inheritence is used to inherit the properties of multiple base class into single derived class.
This creates a more complex inheritance hierarchy, where there are multiple paths through which methods and properties can be inherited.
Below sytax are the example of Hybrid inheritence because it uses more then one type of inheritence(Single and Multiple Inheritence).
Syntax:

     class BaseClass:        
         Base class code   
     class DerivedClass1(BaseClass):      
         Base class code 
     class DerivedClass2(BaseClass):      
         Derived Class 2 code 
     class DerivedClass2(DerivedClass1,DerivedClass2): 
         Derived class 2 code

class A:
  def methodA(self):
    print('Inside methodA')
class B(A):
  def methodB(self):
    print('Inside methodB')
class C(A):
  def methodC(self):
    print('Inside methodC')
class D(C,B):
  def methodD(self):
    print('Inside methodD')

d=D()
d.methodD() 
d.methodB()


5.Hierarchy Inheritence

It is a types of inheritence where multiple subclass inherit from single base class or in other word,
from one base class we can inherit any number of child class.

Syntax:

     class BaseClass:        
         Base class code   
     class DerivedClass1(BaseClass):      
         Base class code 
     class DerivedClass2(BaseClass):      
         Derived Class 2 code 

# Hierarchical Inheritence Example
class P:
  def m1(self):
    print('Parent Class method')

class Q(P):     #inherit base class
  def m2(self):
    print('Child Method of class Q')

class R(P):     #inherit base class
  def m3(self):
    print('Child Method of class R')
    
     

q=Q()
print('*'*10,'Hierarchical Inheritence Example','*'*10)
q.m2()
q.m1()



Polymorphism

1.Polymorphism is one of the fundamental principles of object-oriented programming (OOP).
2.Polymorphism means the ability to take multiple forms. So, for instance, 
if the parent class has a method named ABC then the child class also can have a 
method with the same name ABC having its own parameters and variables. 
3.It allows different objects to be treated as instances of a common base class.

In Python, polymorphism is implemented primarily through method overriding and operator overloading.

class Shape:
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return 3.14 * self.radius * self.radius

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def area(self):
        return self.width * self.height

# Polymorphism in action
shapes = [Circle(5), Rectangle(4, 6)]
for shape in shapes:
    print(f"Area of shape: {shape.area()}")
	
	
Method Overriding
Achieved by defining a method in a child class with the same name as a method in the parent class.
The method in the child class overrides the method in the parent class.


class Parent:
  def marry(self):
    print('Your wife should be an engineer')

class Child(Parent):
  def marry(self): #child override the method of parent 
    print('My Wife should be a doctor')


c=Child()
c.marry()

o/p-
My Wife should be a doctor
	
operator overloading.
Python allows operators to be overloaded for objects of user-defined classes.
The __add__, __sub__, and other special methods enable custom behavior for operators.

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, other):
        return Point(self.x + other.x, self.y + other.y)

p1 = Point(1, 2)
p2 = Point(3, 4)
result = p1 + p2  # Calls the __add__ method for Point objects
print(result.x, result.y)


Benefits of Polymorphism:
Code Reusability
Flexibility and Adaptability
Maintainability
Expressiveness
Design Flexibility


Abstraction
1.Data Abtration refer to the the act of representing essential feature without including irrelevent details
2.It can be achieved in Python by using classes and object.
3.Classes encapsulate data and methods, providing a blueprint for creating objects.
4.Objects represent instances of classes and encapsulate the state and behavior associated with those instances.

l=[2,5,1,9]
l.sort()[hide internal working ]
print(l)-[1,2,5,9]

Abstract Classes and method:
1.Abstract Classes are classes that cannot be instantiated or we can not create object of abstract class. 
2.They serve as blueprints for other classes and may define abstract methods 
(methods without implementation) that must be implemented by subclasses. 

3.Abstract classes are created using the abc(Abstract Base Class) module in Python.
4.An Abstract class can contain the both method normal and abstract method.

from abc import ABC,abstractmethod
class Car(ABC):
  @abstractmethod
  def mileage(self):
    pass
	
class Audi(Car):
  def mileage(self):
    return 'Mileage is 10 km'

class BMW(Car):
  def mileage(self):
    return 'Mileage is 9km'

class Verna(Car):
  def mileage(self):
    return 'Mileage is 12km'
	

Abstraction is important because it helps to produce code that is more reliable, maintainable, and scalable.
v=Verna()
v.mileage()

o/p-Mileage is 12km

Benefits of Abstraction in Python:

1.Reduced Complexity
2.Enhanced Modularity
3.Improved Maintainability
4.Increased Reusability
5.Enhanced Security
6.Code Reusability

OOPs has several advantages including:
Modularity
Maintainability:
Scalability